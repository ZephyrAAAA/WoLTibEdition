include "TriggerLibs/NativeLib"
include "TriggerLibs/CampaignLib"

include "Lib3B48F5E9_h"

//--------------------------------------------------------------------------------------------------
// Library: WoLTibLib
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib3B48F5E9_InitLibraries () {
    libNtve_InitVariables();
    libCamp_InitVariables();
}

// Variable Initialization
bool lib3B48F5E9_InitVariables_completed = false;

void lib3B48F5E9_InitVariables () {
    if (lib3B48F5E9_InitVariables_completed) {
        return;
    }

    lib3B48F5E9_InitVariables_completed = true;

    lib3B48F5E9_gv_fleetGroup = UnitGroupEmpty();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Imports
//--------------------------------------------------------------------------------------------------
include "main.galaxy";

void lib3B48F5E9_InitCustomScript () {
    main();
}

// Functions
trigger auto_lib3B48F5E9_gf_CNCUpgradesFunction_Trigger = null;
int auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_playerGroupRace;
playergroup auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_enemyPlayers;
fixed auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_upgradeInitialTimeDelay;
fixed auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_upgradeTimeScalar;
fixed auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_upgradeTime;
int auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_initialUpgrades;
int auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_initialUpgradeLevel;
int auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_maxUpgradeLevel;
bool auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_airAtAll;
bool auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_airFirst;
bool auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_armourWithAttack;

void lib3B48F5E9_gf_CNCUpgradesFunction (int lp_playerGroupRace, playergroup lp_enemyPlayers, fixed lp_upgradeInitialTimeDelay, fixed lp_upgradeTimeScalar, fixed lp_upgradeTime, int lp_initialUpgrades, int lp_initialUpgradeLevel, int lp_maxUpgradeLevel, bool lp_airAtAll, bool lp_airFirst, bool lp_armourWithAttack) {
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_playerGroupRace = lp_playerGroupRace;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_enemyPlayers = lp_enemyPlayers;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_upgradeInitialTimeDelay = lp_upgradeInitialTimeDelay;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_upgradeTimeScalar = lp_upgradeTimeScalar;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_upgradeTime = lp_upgradeTime;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_initialUpgrades = lp_initialUpgrades;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_initialUpgradeLevel = lp_initialUpgradeLevel;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_maxUpgradeLevel = lp_maxUpgradeLevel;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_airAtAll = lp_airAtAll;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_airFirst = lp_airFirst;
    auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_armourWithAttack = lp_armourWithAttack;

    if (auto_lib3B48F5E9_gf_CNCUpgradesFunction_Trigger == null) {
        auto_lib3B48F5E9_gf_CNCUpgradesFunction_Trigger = TriggerCreate("auto_lib3B48F5E9_gf_CNCUpgradesFunction_TriggerFunc");
    }

    TriggerExecute(auto_lib3B48F5E9_gf_CNCUpgradesFunction_Trigger, false, false);
}

bool auto_lib3B48F5E9_gf_CNCUpgradesFunction_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerGroupRace = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_playerGroupRace;
    playergroup lp_enemyPlayers = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_enemyPlayers;
    fixed lp_upgradeInitialTimeDelay = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_upgradeInitialTimeDelay;
    fixed lp_upgradeTimeScalar = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_upgradeTimeScalar;
    fixed lp_upgradeTime = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_upgradeTime;
    int lp_initialUpgrades = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_initialUpgrades;
    int lp_initialUpgradeLevel = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_initialUpgradeLevel;
    int lp_maxUpgradeLevel = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_maxUpgradeLevel;
    bool lp_airAtAll = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_airAtAll;
    bool lp_airFirst = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_airFirst;
    bool lp_armourWithAttack = auto_lib3B48F5E9_gf_CNCUpgradesFunction_lp_armourWithAttack;

    int init_i;
    int init_j;

    // Variable Declarations
    int lv_currentUpgradeLevel;
    int lv_maxUpgradeLevel;
    int lv_currentUpgrades;
    string[4][4] lv_attackUpgrades;
    string[4][4] lv_armourUpgrades;
    string[4] lv_specialUpgrade;
    string[7] lv_assortedUpgrades;
    string lv_assortedUpgrades2;
    string lv_assortedUpgrades3;
    string lv_assortedUpgrades4;
    string lv_assortedUpgrades5;
    string lv_assortedUpgrades6;
    fixed lv_upgradeDelayTimer;

    // Automatic Variable Declarations
    int autoDFC0F681_val;
    playergroup auto46D14E10_g;
    int auto46D14E10_var;
    playergroup auto57E77ED7_g;
    int auto57E77ED7_var;
    playergroup auto9317D1ED_g;
    int auto9317D1ED_var;
    playergroup auto5EC2CC13_g;
    int auto5EC2CC13_var;
    playergroup autoA7838E67_g;
    int autoA7838E67_var;
    int autoC11D4559_val;
    int auto9C176D4E_val;
    playergroup autoA4759C5D_g;
    int autoA4759C5D_var;
    playergroup auto3951E84F_g;
    int auto3951E84F_var;
    playergroup auto0013A39A_g;
    int auto0013A39A_var;
    playergroup autoCF4BA73B_g;
    int autoCF4BA73B_var;
    playergroup autoA0AC99DB_g;
    int autoA0AC99DB_var;
    playergroup auto5CFBA425_g;
    int auto5CFBA425_var;
    playergroup auto6F24484E_g;
    int auto6F24484E_var;
    playergroup autoD4E41929_g;
    int autoD4E41929_var;
    playergroup auto8D1DCEC3_g;
    int auto8D1DCEC3_var;
    playergroup auto9890C451_g;
    int auto9890C451_var;
    playergroup auto4992AF7F_g;
    int auto4992AF7F_var;
    playergroup autoEA3719EB_g;
    int autoEA3719EB_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            lv_attackUpgrades[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            lv_armourUpgrades[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_specialUpgrade[init_i] = "";
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_assortedUpgrades[init_i] = "";
    }
    lv_assortedUpgrades2 = "";
    lv_assortedUpgrades3 = "";
    lv_assortedUpgrades4 = "";
    lv_assortedUpgrades5 = "";
    lv_assortedUpgrades6 = "";

    // Implementation
    if ((lp_maxUpgradeLevel == 0)) {
        if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 9)) {
            lv_maxUpgradeLevel = 3;
        }
        else {
            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 5)) {
                lv_maxUpgradeLevel = 2;
            }
            else {
                lv_maxUpgradeLevel = 1;
            }
        }
    }
    else {
        lv_maxUpgradeLevel = lp_maxUpgradeLevel;
    }
    if ((lp_upgradeTime > 0.0)) {
        lv_upgradeDelayTimer = lp_upgradeTime;
    }
    else {
        if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 9)) {
            lv_upgradeDelayTimer = ((((5-((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed)-9)/3))*60)*lp_upgradeTimeScalar));
        }
        else {
            lv_upgradeDelayTimer = (((300)*lp_upgradeTimeScalar));
        }
    }
    autoDFC0F681_val = lp_playerGroupRace;
    if (autoDFC0F681_val == 1) {
        lv_attackUpgrades[0][0] = "TerranInfantryWeaponsLevel1";
        lv_attackUpgrades[1][0] = "TerranInfantryWeaponsLevel2";
        lv_attackUpgrades[2][0] = "TerranInfantryWeaponsLevel3";
        lv_attackUpgrades[0][1] = "TerranVehicleWeaponsLevel1";
        lv_attackUpgrades[1][1] = "TerranVehicleWeaponsLevel2";
        lv_attackUpgrades[2][1] = "TerranInfantryWeaponsLevel3";
        lv_armourUpgrades[0][0] = "TerranInfantryArmorsLevel1";
        lv_armourUpgrades[1][0] = "TerranInfantryArmorsLevel2";
        lv_armourUpgrades[2][0] = "TerranInfantryArmorsLevel3";
        lv_armourUpgrades[0][1] = "TerranVehicleArmorsLevel1";
        lv_armourUpgrades[1][1] = "TerranVehicleArmorsLevel2";
        lv_armourUpgrades[2][1] = "TerranVehicleArmorsLevel3";
        lv_specialUpgrade[0] = "TerranShipWeaponsLevel1";
        lv_specialUpgrade[1] = "TerranShipWeaponsLevel2";
        lv_specialUpgrade[2] = "TerranShipWeaponsLevel3";
        lv_assortedUpgrades[0] = "MedivacCaduceusReactor";
        lv_assortedUpgrades[1] = "RavenCorvidReactor";
        lv_assortedUpgrades[2] = "DefensiveMatrixResearch";
        auto46D14E10_g = lp_enemyPlayers;
        auto46D14E10_var = -1;
        while (true) {
            auto46D14E10_var = PlayerGroupNextPlayer(auto46D14E10_g, auto46D14E10_var);
            if (auto46D14E10_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto46D14E10_var, "BansheeCloak", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "HunterSeeker", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "WraithCloak", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "YamatoCannon", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "SiegeTech", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "ReaperSpeed", 1);
        }
        auto57E77ED7_g = lp_enemyPlayers;
        auto57E77ED7_var = -1;
        while (true) {
            auto57E77ED7_var = PlayerGroupNextPlayer(auto57E77ED7_g, auto57E77ED7_var);
            if (auto57E77ED7_var < 0) { break; }
            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 1)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "CombatShield", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MarineStimpack", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "StabilizerMedPacks", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "AdvancedMedicTraining", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 2)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "HailstormMissilePods", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ReinforcedSuperstructure", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ProjectileAccelerators", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ShrikeTurret", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 3)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "JackhammerConcussionGrenades", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MarauderLifeBoost", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "BearclawNozzles", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "FirebatJuggernautPlating", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 4)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ReaperU238Rounds", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ClusterBomb", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "CerberusMines", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "NanoConstructor", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 5)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "HydraulicStabilizers", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "TwinLinkedFlameThrowers", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MultilockTargetingSystems", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "AresClassWeaponsSystem", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "DualFusionWelders", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "AdvancedConstruction", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 6)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "TriLithiumPowerCells", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ShapedHull", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "SiegeTankShapedBlast", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MaelstromRounds", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 7)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "CloakDistortionField", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "DynamicPowerRouting", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "FireSuppressionSystems", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "OrbitalRelay", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 8)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "Predator", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MedivacRapidDeployment", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "AdvancedHealingAI", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 9)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ClusterWarheads", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "CrossSpectrumDampeners", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "AresClassWeaponsSystemViking", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "HALORockets", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 10)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MechanicalRebirth", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "330mmBarrageCannons", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "DefensiveMatrix", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "HurricaneMissiles", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 11)) {
            }

        }
    }
    else if (autoDFC0F681_val == 2) {
        lv_attackUpgrades[0][0] = "ZergMeleeWeaponsLevel1";
        lv_attackUpgrades[1][0] = "ZergMeleeWeaponsLevel2";
        lv_attackUpgrades[2][0] = "ZergMeleeWeaponsLevel3";
        lv_attackUpgrades[0][1] = "ZergFlyerWeaponsLevel1";
        lv_attackUpgrades[1][1] = "ZergFlyerWeaponsLevel2";
        lv_attackUpgrades[2][1] = "ZergFlyerWeaponsLevel3";
        lv_armourUpgrades[0][0] = "ZergGroundArmorsLevel1";
        lv_armourUpgrades[1][0] = "ZergGroundArmorsLevel2";
        lv_armourUpgrades[2][0] = "ZergGroundArmorsLevel3";
        lv_armourUpgrades[0][1] = "ZergFlyerArmorsLevel1";
        lv_armourUpgrades[1][1] = "ZergFlyerArmorsLevel2";
        lv_armourUpgrades[2][1] = "ZergFlyerArmorsLevel3";
        lv_specialUpgrade[0] = "ZergMissileWeaponsLevel1";
        lv_specialUpgrade[1] = "ZergMissileWeaponsLevel2";
        lv_specialUpgrade[2] = "ZergMissileWeaponsLevel3";
        lv_assortedUpgrades[0] = "zerglingmovementspeed";
        lv_assortedUpgrades[1] = "GlialReconstitution";
        lv_assortedUpgrades[2] = "CentrificalHooks";
        lv_assortedUpgrades[3] = "AnabolicSynthesis";
        lv_assortedUpgrades[4] = "zerglingattackspeed";
        lv_assortedUpgrades[5] = "ChitinousPlating";
        auto9317D1ED_g = lp_enemyPlayers;
        auto9317D1ED_var = -1;
        while (true) {
            auto9317D1ED_var = PlayerGroupNextPlayer(auto9317D1ED_g, auto9317D1ED_var);
            if (auto9317D1ED_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "InfestorPeristalsis", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "InfestorEnergyUpgrade", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "Burrow", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "overlordspeed", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "overlordtransport", 1);
        }
    }
    else if (autoDFC0F681_val == 3) {
        lv_attackUpgrades[0][0] = "ProtossGroundWeaponsLevel1";
        lv_attackUpgrades[1][0] = "ProtossGroundWeaponsLevel2";
        lv_attackUpgrades[2][0] = "ProtossGroundWeaponsLevel3";
        lv_attackUpgrades[0][1] = "ProtossAirWeaponsLevel1";
        lv_attackUpgrades[1][1] = "ProtossAirWeaponsLevel2";
        lv_attackUpgrades[2][1] = "ProtossAirWeaponsLevel3";
        lv_armourUpgrades[0][0] = "ProtossGroundArmorsLevel1";
        lv_armourUpgrades[1][0] = "ProtossGroundArmorsLevel2";
        lv_armourUpgrades[2][0] = "ProtossGroundArmorsLevel3";
        lv_armourUpgrades[0][1] = "ProtossAirArmorsLevel1";
        lv_armourUpgrades[1][1] = "ProtossAirArmorsLevel2";
        lv_armourUpgrades[2][1] = "ProtossAirArmorsLevel3";
        lv_specialUpgrade[0] = "ProtossShieldsLevel1";
        lv_specialUpgrade[1] = "ProtossShieldsLevel2";
        lv_specialUpgrade[2] = "ProtossShieldsLevel3";
        lv_assortedUpgrades[0] = "HighTemplarKhaydarinAmulet";
        lv_assortedUpgrades[1] = "ExtendedThermalLance";
        lv_assortedUpgrades[2] = "VoidRaySpeedUpgrade";
        lv_assortedUpgrades[3] = "CarrierLaunchSpeedUpgrade";
        auto5EC2CC13_g = lp_enemyPlayers;
        auto5EC2CC13_var = -1;
        while (true) {
            auto5EC2CC13_var = PlayerGroupNextPlayer(auto5EC2CC13_g, auto5EC2CC13_var);
            if (auto5EC2CC13_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "WarpGateResearch", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "PsiStormTech", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "haltech", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "ObserverGraviticBooster", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "GraviticDrive", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "Charge", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "BlinkTech", 1);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_3B48F5E9_BF307B53"));

    }
    lv_currentUpgradeLevel = (lp_initialUpgradeLevel-1);
    if ((lv_currentUpgradeLevel < 0)) {
        lv_currentUpgradeLevel = 0;
    }

    if ((lp_initialUpgrades >= 7)) {
        lv_currentUpgrades = (((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed)-3)/3));
    }
    else {
        lv_currentUpgrades = (lp_initialUpgrades-1);
    }
    if ((lv_currentUpgrades < 0)) {
        lv_currentUpgrades = 0;
    }

    autoA7838E67_g = lp_enemyPlayers;
    autoA7838E67_var = -1;
    while (true) {
        autoA7838E67_var = PlayerGroupNextPlayer(autoA7838E67_g, autoA7838E67_var);
        if (autoA7838E67_var < 0) { break; }
        autoC11D4559_val = lp_initialUpgradeLevel;
        if (autoC11D4559_val == 1) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_specialUpgrade[0], 1);
        }
        else if (autoC11D4559_val == 2) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[1][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[1][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[1][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[1][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_specialUpgrade[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_specialUpgrade[1], 1);
        }
        else if (autoC11D4559_val == 3) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[1][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[1][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[2][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[2][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[1][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[1][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[2][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[2][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_specialUpgrade[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_specialUpgrade[1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_specialUpgrade[2], 1);
        }
        else {
        }
        auto9C176D4E_val = lv_currentUpgrades;
        if (auto9C176D4E_val == 1) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
        }
        else if (auto9C176D4E_val == 2) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
        }
        else if (auto9C176D4E_val == 3) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[2], 1);
        }
        else if (auto9C176D4E_val == 4) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[2], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[3], 1);
        }
        else if (auto9C176D4E_val == 5) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[2], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[3], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[4], 1);
        }
        else if (auto9C176D4E_val == 6) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[2], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[3], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[4], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[5], 1);
        }
        else {
        }
    }
    Wait(lp_upgradeInitialTimeDelay, c_timeAI);
    while (true) {
        if (((lv_currentUpgradeLevel >= 2) || (lv_currentUpgradeLevel >= lv_maxUpgradeLevel)) && (lv_currentUpgrades >= 6)) {
            break;
        }
        else {
            Wait(lv_upgradeDelayTimer, c_timeAI);
            if ((lp_airAtAll == true)) {
                if ((lp_armourWithAttack == true)) {
                    auto0013A39A_g = lp_enemyPlayers;
                    auto0013A39A_var = -1;
                    while (true) {
                        auto0013A39A_var = PlayerGroupNextPlayer(auto0013A39A_g, auto0013A39A_var);
                        if (auto0013A39A_var < 0) { break; }
                        TechTreeUpgradeAddLevel(auto0013A39A_var, lv_assortedUpgrades[lv_currentUpgrades], 1);
                        TechTreeUpgradeAddLevel(auto0013A39A_var, lv_attackUpgrades[lv_currentUpgradeLevel][0], 1);
                        TechTreeUpgradeAddLevel(auto0013A39A_var, lv_armourUpgrades[lv_currentUpgradeLevel][0], 1);
                        lv_currentUpgrades += 1;
                    }
                }
                else {
                    autoA4759C5D_g = lp_enemyPlayers;
                    autoA4759C5D_var = -1;
                    while (true) {
                        autoA4759C5D_var = PlayerGroupNextPlayer(autoA4759C5D_g, autoA4759C5D_var);
                        if (autoA4759C5D_var < 0) { break; }
                        TechTreeUpgradeAddLevel(autoA4759C5D_var, lv_assortedUpgrades[lv_currentUpgrades], 1);
                        TechTreeUpgradeAddLevel(autoA4759C5D_var, lv_attackUpgrades[lv_currentUpgradeLevel][0], 1);
                        lv_currentUpgrades += 1;
                    }
                    Wait(lv_upgradeDelayTimer, c_timeAI);
                    auto3951E84F_g = lp_enemyPlayers;
                    auto3951E84F_var = -1;
                    while (true) {
                        auto3951E84F_var = PlayerGroupNextPlayer(auto3951E84F_g, auto3951E84F_var);
                        if (auto3951E84F_var < 0) { break; }
                        TechTreeUpgradeAddLevel(auto3951E84F_var, lv_armourUpgrades[lv_currentUpgradeLevel][0], 1);
                    }
                }
            }
            else {
                if ((lp_armourWithAttack == true)) {
                    auto5CFBA425_g = lp_enemyPlayers;
                    auto5CFBA425_var = -1;
                    while (true) {
                        auto5CFBA425_var = PlayerGroupNextPlayer(auto5CFBA425_g, auto5CFBA425_var);
                        if (auto5CFBA425_var < 0) { break; }
                        TechTreeUpgradeAddLevel(auto5CFBA425_var, lv_assortedUpgrades[lv_currentUpgrades], 1);
                        lv_currentUpgrades += 1;
                        if ((lp_airFirst == false)) {
                            TechTreeUpgradeAddLevel(auto5CFBA425_var, lv_attackUpgrades[lv_currentUpgradeLevel][0], 1);
                        }
                        else {
                            TechTreeUpgradeAddLevel(auto5CFBA425_var, lv_attackUpgrades[lv_currentUpgradeLevel][1], 1);
                        }
                    }
                    auto6F24484E_g = lp_enemyPlayers;
                    auto6F24484E_var = -1;
                    while (true) {
                        auto6F24484E_var = PlayerGroupNextPlayer(auto6F24484E_g, auto6F24484E_var);
                        if (auto6F24484E_var < 0) { break; }
                        if ((lp_airFirst == false)) {
                            TechTreeUpgradeAddLevel(auto6F24484E_var, lv_armourUpgrades[lv_currentUpgradeLevel][0], 1);
                        }
                        else {
                            TechTreeUpgradeAddLevel(auto6F24484E_var, lv_armourUpgrades[lv_currentUpgradeLevel][1], 1);
                        }
                    }
                }
                else {
                    autoCF4BA73B_g = lp_enemyPlayers;
                    autoCF4BA73B_var = -1;
                    while (true) {
                        autoCF4BA73B_var = PlayerGroupNextPlayer(autoCF4BA73B_g, autoCF4BA73B_var);
                        if (autoCF4BA73B_var < 0) { break; }
                        TechTreeUpgradeAddLevel(autoCF4BA73B_var, lv_assortedUpgrades[lv_currentUpgrades], 1);
                        lv_currentUpgrades += 1;
                        if ((lp_airFirst == false)) {
                            TechTreeUpgradeAddLevel(autoCF4BA73B_var, lv_attackUpgrades[lv_currentUpgradeLevel][0], 1);
                        }
                        else {
                            TechTreeUpgradeAddLevel(autoCF4BA73B_var, lv_attackUpgrades[lv_currentUpgradeLevel][1], 1);
                        }
                    }
                    Wait(lv_upgradeDelayTimer, c_timeAI);
                    autoA0AC99DB_g = lp_enemyPlayers;
                    autoA0AC99DB_var = -1;
                    while (true) {
                        autoA0AC99DB_var = PlayerGroupNextPlayer(autoA0AC99DB_g, autoA0AC99DB_var);
                        if (autoA0AC99DB_var < 0) { break; }
                        if ((lp_airFirst == false)) {
                            TechTreeUpgradeAddLevel(autoA0AC99DB_var, lv_armourUpgrades[lv_currentUpgradeLevel][0], 1);
                        }
                        else {
                            TechTreeUpgradeAddLevel(autoA0AC99DB_var, lv_armourUpgrades[lv_currentUpgradeLevel][1], 1);
                        }
                    }
                }
                Wait(lv_upgradeDelayTimer, c_timeAI);
                if ((lp_armourWithAttack == true)) {
                    autoD4E41929_g = lp_enemyPlayers;
                    autoD4E41929_var = -1;
                    while (true) {
                        autoD4E41929_var = PlayerGroupNextPlayer(autoD4E41929_g, autoD4E41929_var);
                        if (autoD4E41929_var < 0) { break; }
                        TechTreeUpgradeAddLevel(autoD4E41929_var, lv_assortedUpgrades[lv_currentUpgrades], 1);
                        lv_currentUpgrades += 1;
                        if ((lp_airFirst == false)) {
                            TechTreeUpgradeAddLevel(autoD4E41929_var, lv_attackUpgrades[lv_currentUpgradeLevel][1], 1);
                        }
                        else {
                            TechTreeUpgradeAddLevel(autoD4E41929_var, lv_attackUpgrades[lv_currentUpgradeLevel][0], 1);
                        }
                    }
                    auto8D1DCEC3_g = lp_enemyPlayers;
                    auto8D1DCEC3_var = -1;
                    while (true) {
                        auto8D1DCEC3_var = PlayerGroupNextPlayer(auto8D1DCEC3_g, auto8D1DCEC3_var);
                        if (auto8D1DCEC3_var < 0) { break; }
                        if ((lp_airFirst == false)) {
                            TechTreeUpgradeAddLevel(auto8D1DCEC3_var, lv_armourUpgrades[lv_currentUpgradeLevel][1], 1);
                        }
                        else {
                            TechTreeUpgradeAddLevel(auto8D1DCEC3_var, lv_armourUpgrades[lv_currentUpgradeLevel][0], 1);
                        }
                    }
                }
                else {
                    auto9890C451_g = lp_enemyPlayers;
                    auto9890C451_var = -1;
                    while (true) {
                        auto9890C451_var = PlayerGroupNextPlayer(auto9890C451_g, auto9890C451_var);
                        if (auto9890C451_var < 0) { break; }
                        TechTreeUpgradeAddLevel(auto9890C451_var, lv_assortedUpgrades[lv_currentUpgrades], 1);
                        lv_currentUpgrades += 1;
                        if ((lp_airFirst == false)) {
                            TechTreeUpgradeAddLevel(auto9890C451_var, lv_attackUpgrades[lv_currentUpgradeLevel][1], 1);
                        }
                        else {
                            TechTreeUpgradeAddLevel(auto9890C451_var, lv_attackUpgrades[lv_currentUpgradeLevel][0], 1);
                        }
                    }
                    Wait(lv_upgradeDelayTimer, c_timeAI);
                    auto4992AF7F_g = lp_enemyPlayers;
                    auto4992AF7F_var = -1;
                    while (true) {
                        auto4992AF7F_var = PlayerGroupNextPlayer(auto4992AF7F_g, auto4992AF7F_var);
                        if (auto4992AF7F_var < 0) { break; }
                        if ((lp_airFirst == false)) {
                            TechTreeUpgradeAddLevel(auto4992AF7F_var, lv_armourUpgrades[lv_currentUpgradeLevel][1], 1);
                        }
                        else {
                            TechTreeUpgradeAddLevel(auto4992AF7F_var, lv_armourUpgrades[lv_currentUpgradeLevel][0], 1);
                        }
                    }
                }
            }
            Wait(lv_upgradeDelayTimer, c_timeAI);
            autoEA3719EB_g = lp_enemyPlayers;
            autoEA3719EB_var = -1;
            while (true) {
                autoEA3719EB_var = PlayerGroupNextPlayer(autoEA3719EB_g, autoEA3719EB_var);
                if (autoEA3719EB_var < 0) { break; }
                TechTreeUpgradeAddLevel(autoEA3719EB_var, lv_specialUpgrade[lv_currentUpgradeLevel], 1);
            }
            lv_currentUpgradeLevel += 1;
        }
    }
    return true;
}

void lib3B48F5E9_gf_Taldarimify (playergroup lp_players) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto9451F864_g;

    // Variable Initialization

    // Implementation
    auto9451F864_g = lp_players;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto9451F864_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ColossusTal", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "NexusForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "GatewayForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "DarkShrineForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "FleetBeaconForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "StargateForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "TwilightCouncilForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "RoboticsBayForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "RoboticsFacilityForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "AssimilatorForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "TemplarArchiveForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "CyberneticsCoreForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ShieldBatteryForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PhotonCannonForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ForgeForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PylonForged", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ZealotTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "WarpPrismTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "VoidRayTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "StalkerTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "SentryTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ProbeTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "PhoenixTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ObserverTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "MothershipTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "ImmortalTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "HighTemplarTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "DarkTemplarTaldarim", true);
        libNtve_gf_PlayerApplySkinReplacingExistingUnit(lv_player, "CarrierTaldarim", true);
        PlayerSetColorIndex(lv_player, 1, true);
    }
}

trigger auto_lib3B48F5E9_gf_NewModTips_Trigger = null;

void lib3B48F5E9_gf_NewModTips () {
    if (auto_lib3B48F5E9_gf_NewModTips_Trigger == null) {
        auto_lib3B48F5E9_gf_NewModTips_Trigger = TriggerCreate("auto_lib3B48F5E9_gf_NewModTips_TriggerFunc");
    }

    TriggerExecute(auto_lib3B48F5E9_gf_NewModTips_Trigger, false, false);
}

bool auto_lib3B48F5E9_gf_NewModTips_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_3B48F5E9_6C689267"));
    Wait(15.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Commando EXP
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_CommandoEXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_xP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "Veterancy") == true))) {
            return false;
        }

        if (!((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, UnitGetOwner(EventUnitDamageSourceUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_xP = EventUnitDamageAmount();
    if ((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
        if ((UnitWeaponCount(EventUnit()) == 0)) {
            lv_xP = (lv_xP/4);
        }
        else {
            lv_xP = (lv_xP/2);
        }
    }

    UnitXPAddXP(EventUnitDamageSourceUnit(), "Veterancy", lv_xP);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_CommandoEXP_Init () {
    lib3B48F5E9_gt_CommandoEXP = TriggerCreate("lib3B48F5E9_gt_CommandoEXP_Func");
    TriggerAddEventUnitDamaged(lib3B48F5E9_gt_CommandoEXP, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Upgrade Swap
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_TerranUpgradeSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoAB0E8CEF_val;

    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeComputer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAB0E8CEF_val = EventUpgradeName();
    if (autoAB0E8CEF_val == "TerranInfantryArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaperScannerPack", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleVanadiumPlating", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipVanadiumPlating", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranBuildingArmor", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryUltraCapacitors", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HailstormLaunchers", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranShipWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipUltraCapacitors", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "EnhancedExplosives", 1);
    }
    else if (autoAB0E8CEF_val == "TerranShipWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HighEnergyCapacitors", 1);
    }
    else if (autoAB0E8CEF_val == "TerranShipWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleUltraCapacitors", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HellionCampaignInfernalPreIgniter", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HiSecAutoTracking", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ImprovedRailguns", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_TerranUpgradeSwap_Init () {
    lib3B48F5E9_gt_TerranUpgradeSwap = TriggerCreate("lib3B48F5E9_gt_TerranUpgradeSwap_Func");
    TriggerAddEventUpgradeLevelChanged(lib3B48F5E9_gt_TerranUpgradeSwap, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Squad Health
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_SquadHealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mainUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SquadUnit") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mainUnit = UnitBehaviorEffectUnit(EventUnit(), "SquadUnit", c_effectUnitCaster, 0);
    UnitSetPropertyFixed(lv_mainUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_mainUnit, c_unitPropLife, c_unitPropCurrent) + EventUnitPropertyChangeFixed()));
    Wait(0.625, c_timeGame);
    if ((UnitMagazineCount(lv_mainUnit, "DevilDogSquad") == 0) && (UnitMagazineCount(lv_mainUnit, "FirebatSquad") == 0) && (UnitMagazineCount(lv_mainUnit, "HammerSecuritiesSquad") == 0) && (UnitMagazineCount(lv_mainUnit, "MarauderSquad") == 0) && (UnitMagazineCount(lv_mainUnit, "MarineSquad") == 0) && (UnitMagazineCount(lv_mainUnit, "MedicSquad") == 0) && (UnitMagazineCount(lv_mainUnit, "ReaperSquad") == 0) && (UnitMagazineCount(lv_mainUnit, "WarPigSquad") == 0)) {
        UnitRemove(lv_mainUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_SquadHealth_Init () {
    lib3B48F5E9_gt_SquadHealth = TriggerCreate("lib3B48F5E9_gt_SquadHealth_Func");
    TriggerAddEventUnitProperty(lib3B48F5E9_gt_SquadHealth, null, c_unitPropLife);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Squad Shields
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_SquadShields_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mainUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "SquadUnit") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mainUnit = UnitBehaviorEffectUnit(EventUnit(), "SquadUnit", c_effectUnitCaster, 0);
    UnitSetPropertyFixed(lv_mainUnit, c_unitPropShields, (UnitGetPropertyFixed(lv_mainUnit, c_unitPropShields, c_unitPropCurrent) + EventUnitPropertyChangeFixed()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_SquadShields_Init () {
    lib3B48F5E9_gt_SquadShields = TriggerCreate("lib3B48F5E9_gt_SquadShields_Func");
    TriggerAddEventUnitProperty(lib3B48F5E9_gt_SquadShields, null, c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Predator/Ghost Academy
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_PredatorGhostAcademy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_3B48F5E9_7101F21A"));
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Predator", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "GhostAcademy", true);
    TriggerEnable(lib3B48F5E9_gt_UnhighlightPredator, true);
    TriggerEnable(lib3B48F5E9_gt_UnhighlightGhostAcademy, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_PredatorGhostAcademy_Init () {
    lib3B48F5E9_gt_PredatorGhostAcademy = TriggerCreate("lib3B48F5E9_gt_PredatorGhostAcademy_Func");
    TriggerAddEventTimeElapsed(lib3B48F5E9_gt_PredatorGhostAcademy, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armory/Hercules
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_ArmoryHercules_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) == 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_3B48F5E9_C216B0DE"));
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Armory", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "BuildHercules", true);
    TriggerEnable(lib3B48F5E9_gt_UnhighlightArmory, true);
    TriggerEnable(lib3B48F5E9_gt_UnhighlightHercules, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_ArmoryHercules_Init () {
    lib3B48F5E9_gt_ArmoryHercules = TriggerCreate("lib3B48F5E9_gt_ArmoryHercules_Func");
    TriggerAddEventTimeElapsed(lib3B48F5E9_gt_ArmoryHercules, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fusion Core
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_FusionCore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((((libCamp_gf_CurrentMap() != libCamp_ge_MapID_MapTZeratul01) && (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) == 9)) || ((libCamp_gf_LastMap() == libCamp_ge_MapID_MapTZeratul01) && (libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) == 10))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/lib_3B48F5E9_AB0D213A"));
    UISetButtonFaceHighlighted(PlayerGroupAll(), "FusionCore", true);
    TriggerEnable(lib3B48F5E9_gt_UnhighlightFusionCore, true);
    Wait(10.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_FusionCore_Init () {
    lib3B48F5E9_gt_FusionCore = TriggerCreate("lib3B48F5E9_gt_FusionCore_Func");
    TriggerAddEventTimeElapsed(lib3B48F5E9_gt_FusionCore, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unhighlight Predator
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_UnhighlightPredator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "Predator", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_UnhighlightPredator_Init () {
    lib3B48F5E9_gt_UnhighlightPredator = TriggerCreate("lib3B48F5E9_gt_UnhighlightPredator_Func");
    TriggerEnable(lib3B48F5E9_gt_UnhighlightPredator, false);
    TriggerAddEventTimeElapsed(lib3B48F5E9_gt_UnhighlightPredator, 90.0, c_timeGame);
    TriggerAddEventButtonPressed(lib3B48F5E9_gt_UnhighlightPredator, 1, "Predator");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unhighlight Ghost Academy
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_UnhighlightGhostAcademy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "GhostAcademy", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_UnhighlightGhostAcademy_Init () {
    lib3B48F5E9_gt_UnhighlightGhostAcademy = TriggerCreate("lib3B48F5E9_gt_UnhighlightGhostAcademy_Func");
    TriggerEnable(lib3B48F5E9_gt_UnhighlightGhostAcademy, false);
    TriggerAddEventTimeElapsed(lib3B48F5E9_gt_UnhighlightGhostAcademy, 90.0, c_timeGame);
    TriggerAddEventButtonPressed(lib3B48F5E9_gt_UnhighlightGhostAcademy, 1, "GhostAcademy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unhighlight Armory
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_UnhighlightArmory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "Armory", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_UnhighlightArmory_Init () {
    lib3B48F5E9_gt_UnhighlightArmory = TriggerCreate("lib3B48F5E9_gt_UnhighlightArmory_Func");
    TriggerEnable(lib3B48F5E9_gt_UnhighlightArmory, false);
    TriggerAddEventTimeElapsed(lib3B48F5E9_gt_UnhighlightArmory, 90.0, c_timeGame);
    TriggerAddEventButtonPressed(lib3B48F5E9_gt_UnhighlightArmory, 1, "Armory");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unhighlight Hercules
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_UnhighlightHercules_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "BuildHercules", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_UnhighlightHercules_Init () {
    lib3B48F5E9_gt_UnhighlightHercules = TriggerCreate("lib3B48F5E9_gt_UnhighlightHercules_Func");
    TriggerEnable(lib3B48F5E9_gt_UnhighlightHercules, false);
    TriggerAddEventTimeElapsed(lib3B48F5E9_gt_UnhighlightHercules, 90.0, c_timeGame);
    TriggerAddEventButtonPressed(lib3B48F5E9_gt_UnhighlightHercules, 1, "BuildHercules");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unhighlight Fusion Core
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_UnhighlightFusionCore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonFaceHighlighted(PlayerGroupAll(), "FusionCore", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_UnhighlightFusionCore_Init () {
    lib3B48F5E9_gt_UnhighlightFusionCore = TriggerCreate("lib3B48F5E9_gt_UnhighlightFusionCore_Func");
    TriggerEnable(lib3B48F5E9_gt_UnhighlightFusionCore, false);
    TriggerAddEventTimeElapsed(lib3B48F5E9_gt_UnhighlightFusionCore, 90.0, c_timeGame);
    TriggerAddEventButtonPressed(lib3B48F5E9_gt_UnhighlightFusionCore, 1, "FusionCore");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fleet Ability Swap
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_FleetAbilitySwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogAbil, "CallInGoldenArmada", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", EventPlayer()));
    PlayerAddChargeUsed(EventPlayer(), CatalogFieldValueGet(c_gameCatalogAbil, "CallInGoldenArmada", "Cost[" + IntToString(0) + "].Charge.Link", EventPlayer()), -1.0);
    lib3B48F5E9_gv_fleetGroup = libNtve_gf_ConvertUnitToUnitGroup(EventUnitCreatedUnit());
    UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), lib3B48F5E9_gv_fleetGroup, OrderTargetingPoint(AbilityCommand("FleetActivate", 0), UnitGetPosition(EventUnitCreatedUnit())), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_FleetAbilitySwap_Init () {
    lib3B48F5E9_gt_FleetAbilitySwap = TriggerCreate("lib3B48F5E9_gt_FleetAbilitySwap_Func");
    TriggerAddEventUnitCreated(lib3B48F5E9_gt_FleetAbilitySwap, null, "CallInGoldenArmada", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fleet Ability Cost
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_FleetAbilityCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, CatalogFieldValueGetAsInt(c_gameCatalogAbil, "CallInGoldenArmada", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", EventPlayer()));
    PlayerAddChargeUsed(EventPlayer(), CatalogFieldValueGet(c_gameCatalogAbil, "CallInGoldenArmada", "Cost[" + IntToString(0) + "].Charge.Link", EventPlayer()), 1.0);
    TechTreeAbilityAllow(1, AbilityCommand("CallInGoldenArmada", 0), false);
    RefreshTopbar();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_FleetAbilityCost_Init () {
    lib3B48F5E9_gt_FleetAbilityCost = TriggerCreate("lib3B48F5E9_gt_FleetAbilityCost_Func");
    TriggerAddEventUnitAbility(lib3B48F5E9_gt_FleetAbilityCost, null, AbilityCommand("FleetActivate", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerghyper Remove
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_ZerghyperRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(1, AbilityCommand("ZergHypervirus", 0), false);
    RefreshTopbar();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_ZerghyperRemove_Init () {
    lib3B48F5E9_gt_ZerghyperRemove = TriggerCreate("lib3B48F5E9_gt_ZerghyperRemove_Func");
    TriggerAddEventUnitAbility(lib3B48F5E9_gt_ZerghyperRemove, null, AbilityCommand("ZergHypervirus", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Topbar
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_DebugTopbar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(1, "OrbitalStrike", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "OrbitalRelay", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "PsiDisruptor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HireDevilDogsPH", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HireDukesRevenge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HireDuskWingPH", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HireHammerSecuritiesPH", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HireHelsAngelsPH", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HireSiegeBreakersPH", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HireSpartanCompanyPH", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(1, "HireKelmorianMinersPH", 1);
    TechTreeAbilityAllow(1, AbilityCommand("CallInGoldenArmada", 0), true);
    TechTreeAbilityAllow(1, AbilityCommand("DeployLaserDrill", 0), true);
    if ((TechTreeUnitAliasCount(1, "Alias_ShadowOps", c_techCountQueuedOrBetter) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GhostAcademy2", 0, 1, PlayerStartLocation(1));
    }

    if ((TechTreeUnitAliasCount(1, "Alias_FusionCore", c_techCountQueuedOrBetter) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FusionCore2", 0, 1, PlayerStartLocation(1));
    }

    if ((TechTreeUnitAliasCount(1, "Alias_EngineeringBay", c_techCountQueuedOrBetter) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EngineeringBay2", 0, 1, PlayerStartLocation(1));
    }

    if ((TechTreeUnitAliasCount(1, "Alias_Armory", c_techCountQueuedOrBetter) == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Armory2", 0, 1, PlayerStartLocation(1));
    }

    RefreshTopbar();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_DebugTopbar_Init () {
    lib3B48F5E9_gt_DebugTopbar = TriggerCreate("lib3B48F5E9_gt_DebugTopbar_Func");
    TriggerAddEventChatMessage(lib3B48F5E9_gt_DebugTopbar, c_playerAny, "Topbar", true);
}

void lib3B48F5E9_InitTriggers () {
    lib3B48F5E9_gt_CommandoEXP_Init();
    lib3B48F5E9_gt_TerranUpgradeSwap_Init();
    lib3B48F5E9_gt_SquadHealth_Init();
    lib3B48F5E9_gt_SquadShields_Init();
    lib3B48F5E9_gt_PredatorGhostAcademy_Init();
    lib3B48F5E9_gt_ArmoryHercules_Init();
    lib3B48F5E9_gt_FusionCore_Init();
    lib3B48F5E9_gt_UnhighlightPredator_Init();
    lib3B48F5E9_gt_UnhighlightGhostAcademy_Init();
    lib3B48F5E9_gt_UnhighlightArmory_Init();
    lib3B48F5E9_gt_UnhighlightHercules_Init();
    lib3B48F5E9_gt_UnhighlightFusionCore_Init();
    lib3B48F5E9_gt_FleetAbilitySwap_Init();
    lib3B48F5E9_gt_FleetAbilityCost_Init();
    lib3B48F5E9_gt_ZerghyperRemove_Init();
    lib3B48F5E9_gt_DebugTopbar_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_InitLib_completed = false;

void lib3B48F5E9_InitLib () {
    if (lib3B48F5E9_InitLib_completed) {
        return;
    }

    lib3B48F5E9_InitLib_completed = true;

    lib3B48F5E9_InitLibraries();
    lib3B48F5E9_InitVariables();
    lib3B48F5E9_InitCustomScript();
    lib3B48F5E9_InitTriggers();
}

