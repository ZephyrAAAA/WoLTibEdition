include "TriggerLibs/NativeLib"
include "TriggerLibs/CampaignLib"

include "Lib3B48F5E9_h"

//--------------------------------------------------------------------------------------------------
// Library: WoLTibLib
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib3B48F5E9_InitLibraries () {
    libNtve_InitVariables();
    libCamp_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Imports
//--------------------------------------------------------------------------------------------------
include "main.galaxy";

void lib3B48F5E9_InitCustomScript () {
    main();
}

// Functions
void lib3B48F5E9_gf_CNCUpgradesFunction (int lp_playerGroupRace, playergroup lp_enemyPlayers, fixed lp_upgradeInitialTimeDelay, int lp_upgradeTimeScalar, int lp_upgradeTimeDelay, int lp_initialUpgrades, int lp_initialUpgradeLevel, int lp_maxUpgradeLevel, bool lp_airFirst) {
    int init_i;
    int init_j;

    // Variable Declarations
    int lv_currentUpgradeLevel;
    int lv_currentUpgrades;
    string[4][4] lv_attackUpgrades;
    string[4][4] lv_armourUpgrades;
    string[4] lv_specialUpgrade;
    string[7] lv_assortedUpgrades;
    string lv_assortedUpgrades2;
    string lv_assortedUpgrades3;
    string lv_assortedUpgrades4;
    string lv_assortedUpgrades5;
    string lv_assortedUpgrades6;

    // Automatic Variable Declarations
    int autoDFC0F681_val;
    playergroup auto46D14E10_g;
    int auto46D14E10_var;
    playergroup auto57E77ED7_g;
    int auto57E77ED7_var;
    playergroup auto9317D1ED_g;
    int auto9317D1ED_var;
    playergroup auto5EC2CC13_g;
    int auto5EC2CC13_var;
    playergroup autoA7838E67_g;
    int autoA7838E67_var;
    int autoC11D4559_val;
    int auto9C176D4E_val;
    playergroup auto15123776_g;
    int auto15123776_var;
    playergroup auto5CFBA425_g;
    int auto5CFBA425_var;
    playergroup auto6F24484E_g;
    int auto6F24484E_var;
    playergroup auto42BCAE4C_g;
    int auto42BCAE4C_var;
    playergroup autoB3BE9141_g;
    int autoB3BE9141_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            lv_attackUpgrades[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            lv_armourUpgrades[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_specialUpgrade[init_i] = "";
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_assortedUpgrades[init_i] = "";
    }
    lv_assortedUpgrades2 = "";
    lv_assortedUpgrades3 = "";
    lv_assortedUpgrades4 = "";
    lv_assortedUpgrades5 = "";
    lv_assortedUpgrades6 = "";

    // Implementation
    autoDFC0F681_val = lp_playerGroupRace;
    if (autoDFC0F681_val == 1) {
        lv_attackUpgrades[0][0] = "TerranInfantryWeaponsLevel1";
        lv_attackUpgrades[1][0] = "TerranInfantryWeaponsLevel2";
        lv_attackUpgrades[2][0] = "TerranInfantryWeaponsLevel3";
        lv_attackUpgrades[0][1] = "TerranVehicleWeaponsLevel1";
        lv_attackUpgrades[1][1] = "TerranVehicleWeaponsLevel2";
        lv_attackUpgrades[2][1] = "TerranInfantryWeaponsLevel3";
        lv_armourUpgrades[0][0] = "TerranInfantryArmorsLevel1";
        lv_armourUpgrades[1][0] = "TerranInfantryArmorsLevel2";
        lv_armourUpgrades[2][0] = "TerranInfantryArmorsLevel3";
        lv_armourUpgrades[0][1] = "TerranVehicleArmorsLevel1";
        lv_armourUpgrades[1][1] = "TerranVehicleArmorsLevel2";
        lv_armourUpgrades[2][1] = "TerranVehicleArmorsLevel3";
        lv_specialUpgrade[0] = "TerranShipWeaponsLevel1";
        lv_specialUpgrade[1] = "TerranShipWeaponsLevel2";
        lv_specialUpgrade[2] = "TerranShipWeaponsLevel3";
        lv_assortedUpgrades[0] = "MedivacCaduceusReactor";
        lv_assortedUpgrades[1] = "RavenCorvidReactor";
        lv_assortedUpgrades[2] = "DefensiveMatrixResearch";
        auto46D14E10_g = lp_enemyPlayers;
        auto46D14E10_var = -1;
        while (true) {
            auto46D14E10_var = PlayerGroupNextPlayer(auto46D14E10_g, auto46D14E10_var);
            if (auto46D14E10_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto46D14E10_var, "BansheeCloak", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "HunterSeeker", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "WraithCloak", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "BattlecruiserEnableSpecializations", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "SiegeTech", 1);
            TechTreeUpgradeAddLevel(auto46D14E10_var, "ReaperSpeed", 1);
        }
        auto57E77ED7_g = lp_enemyPlayers;
        auto57E77ED7_var = -1;
        while (true) {
            auto57E77ED7_var = PlayerGroupNextPlayer(auto57E77ED7_g, auto57E77ED7_var);
            if (auto57E77ED7_var < 0) { break; }
            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 1)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "CombatShield", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MarineStimpack", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 2)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "StabilizerMedPacks", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "AdvancedMedicTraining", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 3)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "HailstormMissilePods", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ReinforcedSuperstructure", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ProjectileAccelerators", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ShrikeTurret", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 4)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "JackhammerConcussionGrenades", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MarauderLifeBoost", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 5)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "BearclawNozzles", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "FirebatJuggernautPlating", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 6)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ReaperU238Rounds", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "ClusterBomb", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 7)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "HellionCampaignInfernalPreIgniter", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "TwinLinkedFlameThrowers", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 8)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MultilockTargetingSystems", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "AresClassWeaponsSystem", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 9)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "SiegeTankShapedBlast", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "MaelstromRounds", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 10)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "CerberusMines", 1);
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "NanoConstructor", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 11)) {
                TechTreeUpgradeAddLevel(auto57E77ED7_var, "Predator", 1);
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 12)) {
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 13)) {
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 14)) {
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 15)) {
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 16)) {
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 17)) {
            }

            if ((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed) >= 18)) {
            }

        }
    }
    else if (autoDFC0F681_val == 2) {
        lv_attackUpgrades[0][0] = "ZergMeleeWeaponsLevel1";
        lv_attackUpgrades[1][0] = "ZergMeleeWeaponsLevel2";
        lv_attackUpgrades[2][0] = "ZergMeleeWeaponsLevel3";
        lv_attackUpgrades[0][1] = "ZergFlyerWeaponsLevel1";
        lv_attackUpgrades[1][1] = "ZergFlyerWeaponsLevel2";
        lv_attackUpgrades[2][1] = "ZergFlyerWeaponsLevel3";
        lv_armourUpgrades[0][0] = "ZergGroundArmorsLevel1";
        lv_armourUpgrades[1][0] = "ZergGroundArmorsLevel2";
        lv_armourUpgrades[2][0] = "ZergGroundArmorsLevel3";
        lv_armourUpgrades[0][1] = "ZergFlyerArmorsLevel1";
        lv_armourUpgrades[1][1] = "ZergFlyerArmorsLevel2";
        lv_armourUpgrades[2][1] = "ZergFlyerArmorsLevel3";
        lv_specialUpgrade[0] = "ZergMissileWeaponsLevel1";
        lv_specialUpgrade[1] = "ZergMissileWeaponsLevel2";
        lv_specialUpgrade[2] = "ZergMissileWeaponsLevel3";
        lv_assortedUpgrades[0] = "zerglingmovementspeed";
        lv_assortedUpgrades[1] = "GlialReconstitution";
        lv_assortedUpgrades[2] = "CentrificalHooks";
        lv_assortedUpgrades[3] = "AnabolicSynthesis";
        lv_assortedUpgrades[4] = "zerglingattackspeed";
        lv_assortedUpgrades[5] = "ChitinousPlating";
        auto9317D1ED_g = lp_enemyPlayers;
        auto9317D1ED_var = -1;
        while (true) {
            auto9317D1ED_var = PlayerGroupNextPlayer(auto9317D1ED_g, auto9317D1ED_var);
            if (auto9317D1ED_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "InfestorPeristalsis", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "InfestorEnergyUpgrade", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "Burrow", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "overlordspeed", 1);
            TechTreeUpgradeAddLevel(auto9317D1ED_var, "overlordtransport", 1);
        }
    }
    else if (autoDFC0F681_val == 3) {
        lv_attackUpgrades[0][0] = "ProtossGroundWeaponsLevel1";
        lv_attackUpgrades[1][0] = "ProtossGroundWeaponsLevel2";
        lv_attackUpgrades[2][0] = "ProtossGroundWeaponsLevel3";
        lv_attackUpgrades[0][1] = "ProtossAirWeaponsLevel1";
        lv_attackUpgrades[1][1] = "ProtossAirWeaponsLevel2";
        lv_attackUpgrades[2][1] = "ProtossAirWeaponsLevel3";
        lv_armourUpgrades[0][0] = "ProtossGroundArmorsLevel1";
        lv_armourUpgrades[1][0] = "ProtossGroundArmorsLevel2";
        lv_armourUpgrades[2][0] = "ProtossGroundArmorsLevel3";
        lv_armourUpgrades[0][1] = "ProtossAirArmorsLevel1";
        lv_armourUpgrades[1][1] = "ProtossAirArmorsLevel2";
        lv_armourUpgrades[2][1] = "ProtossAirArmorsLevel3";
        lv_specialUpgrade[0] = "ProtossShieldsLevel1";
        lv_specialUpgrade[1] = "ProtossShieldsLevel2";
        lv_specialUpgrade[2] = "ProtossShieldsLevel3";
        lv_assortedUpgrades[0] = "HighTemplarKhaydarinAmulet";
        lv_assortedUpgrades[1] = "ExtendedThermalLance";
        lv_assortedUpgrades[2] = "VoidRaySpeedUpgrade";
        lv_assortedUpgrades[3] = "CarrierLaunchSpeedUpgrade";
        auto5EC2CC13_g = lp_enemyPlayers;
        auto5EC2CC13_var = -1;
        while (true) {
            auto5EC2CC13_var = PlayerGroupNextPlayer(auto5EC2CC13_g, auto5EC2CC13_var);
            if (auto5EC2CC13_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "WarpGateResearch", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "PsiStormTech", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "haltech", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "ObserverGraviticBooster", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "GraviticDrive", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "Charge", 1);
            TechTreeUpgradeAddLevel(auto5EC2CC13_var, "BlinkTech", 1);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_3B48F5E9_BF307B53"));

    }
    lv_currentUpgradeLevel = (lp_initialUpgradeLevel-1);
    if ((lp_initialUpgrades >= 7)) {
        lv_currentUpgrades = (((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed)-3)/3));
    }
    else {
        lv_currentUpgrades = (lp_initialUpgrades-1);
    }
    autoA7838E67_g = lp_enemyPlayers;
    autoA7838E67_var = -1;
    while (true) {
        autoA7838E67_var = PlayerGroupNextPlayer(autoA7838E67_g, autoA7838E67_var);
        if (autoA7838E67_var < 0) { break; }
        autoC11D4559_val = lp_initialUpgradeLevel;
        if (autoC11D4559_val == 1) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][1], 1);
        }
        else if (autoC11D4559_val == 2) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][1], 1);
        }
        else if (autoC11D4559_val == 3) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_attackUpgrades[0][1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_armourUpgrades[0][1], 1);
        }
        else {
        }
        auto9C176D4E_val = lv_currentUpgrades;
        if (auto9C176D4E_val == 1) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
        }
        else if (auto9C176D4E_val == 2) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
        }
        else if (auto9C176D4E_val == 3) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[2], 1);
        }
        else if (auto9C176D4E_val == 4) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[2], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[3], 1);
        }
        else if (auto9C176D4E_val == 5) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[2], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[3], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[4], 1);
        }
        else if (auto9C176D4E_val == 6) {
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[0], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[1], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[2], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[3], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[4], 1);
            TechTreeUpgradeAddLevel(autoA7838E67_var, lv_assortedUpgrades[5], 1);
        }
        else {
        }
    }
    Wait(lp_upgradeInitialTimeDelay, c_timeGame);
    while (true) {
        if ((lv_currentUpgradeLevel >= 2) && (lv_currentUpgradeLevel < lp_maxUpgradeLevel)) {
        }
        else {
            Wait(((((5-((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed)-9)/3))*60)*IntToFixed(lp_upgradeTimeScalar))), c_timeGame);
            auto15123776_g = lp_enemyPlayers;
            auto15123776_var = -1;
            while (true) {
                auto15123776_var = PlayerGroupNextPlayer(auto15123776_g, auto15123776_var);
                if (auto15123776_var < 0) { break; }
                TechTreeUpgradeAddLevel(auto15123776_var, lv_assortedUpgrades[lv_currentUpgrades], 1);
            }
            Wait(((((5-((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed)-9)/3))*60)*IntToFixed(lp_upgradeTimeScalar))), c_timeGame);
            auto5CFBA425_g = lp_enemyPlayers;
            auto5CFBA425_var = -1;
            while (true) {
                auto5CFBA425_var = PlayerGroupNextPlayer(auto5CFBA425_g, auto5CFBA425_var);
                if (auto5CFBA425_var < 0) { break; }
                if ((lp_airFirst == false)) {
                    TechTreeUpgradeAddLevel(auto5CFBA425_var, lv_attackUpgrades[lv_currentUpgradeLevel][0], 1);
                }
                else {
                    TechTreeUpgradeAddLevel(auto5CFBA425_var, lv_attackUpgrades[lv_currentUpgradeLevel][1], 1);
                }
            }
            Wait(((((5-((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed)-9)/3))*60)*IntToFixed(lp_upgradeTimeScalar))), c_timeGame);
            auto6F24484E_g = lp_enemyPlayers;
            auto6F24484E_var = -1;
            while (true) {
                auto6F24484E_var = PlayerGroupNextPlayer(auto6F24484E_g, auto6F24484E_var);
                if (auto6F24484E_var < 0) { break; }
                if ((lp_airFirst == false)) {
                    TechTreeUpgradeAddLevel(auto6F24484E_var, lv_armourUpgrades[lv_currentUpgradeLevel][0], 1);
                }
                else {
                    TechTreeUpgradeAddLevel(auto6F24484E_var, lv_armourUpgrades[lv_currentUpgradeLevel][1], 1);
                }
            }
            Wait(((((5-((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed)-9)/3))*60)*IntToFixed(lp_upgradeTimeScalar))), c_timeGame);
            auto42BCAE4C_g = lp_enemyPlayers;
            auto42BCAE4C_var = -1;
            while (true) {
                auto42BCAE4C_var = PlayerGroupNextPlayer(auto42BCAE4C_g, auto42BCAE4C_var);
                if (auto42BCAE4C_var < 0) { break; }
                if ((lp_airFirst == false)) {
                    TechTreeUpgradeAddLevel(auto42BCAE4C_var, lv_attackUpgrades[lv_currentUpgradeLevel][1], 1);
                }
                else {
                    TechTreeUpgradeAddLevel(auto42BCAE4C_var, lv_attackUpgrades[lv_currentUpgradeLevel][0], 1);
                }
            }
            Wait(((((5-((libCamp_gf_CountMissions(libCamp_ge_MissionStatus_Completed)-9)/3))*60)*IntToFixed(lp_upgradeTimeScalar))), c_timeGame);
            autoB3BE9141_g = lp_enemyPlayers;
            autoB3BE9141_var = -1;
            while (true) {
                autoB3BE9141_var = PlayerGroupNextPlayer(autoB3BE9141_g, autoB3BE9141_var);
                if (autoB3BE9141_var < 0) { break; }
                if ((lp_airFirst == false)) {
                    TechTreeUpgradeAddLevel(autoB3BE9141_var, lv_armourUpgrades[lv_currentUpgradeLevel][1], 1);
                }
                else {
                    TechTreeUpgradeAddLevel(autoB3BE9141_var, lv_armourUpgrades[lv_currentUpgradeLevel][0], 1);
                }
            }
        }
        lv_currentUpgradeLevel += 1;
        lv_currentUpgrades += 1;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Commando EXP
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_CommandoEXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_xP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "Veterancy") == true))) {
            return false;
        }

        if (!((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, UnitGetOwner(EventUnitDamageSourceUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_xP = EventUnitDamageAmount();
    if ((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true)) {
        if ((UnitGetPropertyInt(EventUnit(), c_unitPropLife, c_unitPropNormal) >= 600)) {
            lv_xP = (lv_xP/4);
        }
        else {
            lv_xP = (lv_xP/2);
        }
    }

    UnitXPAddXP(EventUnitDamageSourceUnit(), "Veterancy", lv_xP);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_CommandoEXP_Init () {
    lib3B48F5E9_gt_CommandoEXP = TriggerCreate("lib3B48F5E9_gt_CommandoEXP_Func");
    TriggerAddEventUnitDamaged(lib3B48F5E9_gt_CommandoEXP, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terran Upgrade Swap
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_TerranUpgradeSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoAB0E8CEF_val;

    // Conditions
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeComputer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAB0E8CEF_val = EventUpgradeName();
    if (autoAB0E8CEF_val == "TerranInfantryArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleVanadiumPlating", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipVanadiumPlating", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranBuildingArmor", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryUltraCapacitors", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HailstormLaunchers", 1);
    }
    else if (autoAB0E8CEF_val == "TerranInfantryWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranShipWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranShipUltraCapacitors", 1);
    }
    else if (autoAB0E8CEF_val == "TerranShipWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HighEnergyCapacitors", 1);
    }
    else if (autoAB0E8CEF_val == "TerranShipWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranVehicleUltraCapacitors", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HellionCampaignInfernalPreIgniter", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HiSecAutoTracking", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ImprovedRailguns", 1);
    }
    else if (autoAB0E8CEF_val == "TerranVehicleWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TerranInfantryVanadiumPlating", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_TerranUpgradeSwap_Init () {
    lib3B48F5E9_gt_TerranUpgradeSwap = TriggerCreate("lib3B48F5E9_gt_TerranUpgradeSwap_Func");
    TriggerAddEventUpgradeLevelChanged(lib3B48F5E9_gt_TerranUpgradeSwap, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fake Warp In Off
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_gt_FakeWarpInOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 100);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3B48F5E9_gt_FakeWarpInOff_Init () {
    lib3B48F5E9_gt_FakeWarpInOff = TriggerCreate("lib3B48F5E9_gt_FakeWarpInOff_Func");
    TriggerAddEventUnitBehaviorChange(lib3B48F5E9_gt_FakeWarpInOff, null, "FakeWarpIn", c_unitBehaviorChangeDestroy);
}

void lib3B48F5E9_InitTriggers () {
    lib3B48F5E9_gt_CommandoEXP_Init();
    lib3B48F5E9_gt_TerranUpgradeSwap_Init();
    lib3B48F5E9_gt_FakeWarpInOff_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib3B48F5E9_InitLib_completed = false;

void lib3B48F5E9_InitLib () {
    if (lib3B48F5E9_InitLib_completed) {
        return;
    }

    lib3B48F5E9_InitLib_completed = true;

    lib3B48F5E9_InitLibraries();
    lib3B48F5E9_InitCustomScript();
    lib3B48F5E9_InitTriggers();
}

