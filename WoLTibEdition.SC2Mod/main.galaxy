trigger gather;
trigger returning;
trigger idle;
trigger building;
trigger research;
trigger pause;
trigger resume;
trigger cancel;
trigger unloadSquads;
trigger techUnlock;
trigger INI;
int rate;
int spendrate;

bool Gather_Func (bool testConds, bool runActions) {
	unit gatherUnit;
	unit refinery;
	int resourceAmount;
	fixed time;
	int resourceDelta;
	
	if (testConds) {
		if (UnitHasBehavior(EventUnit(), "DropOffStun")) {
			return false;
		}
		if (!UnitHasBehavior(EventUnitTargetUnit(), "Refinery")) {
			return false;
		}
	}
	
	if (!runActions) {
		return true;
	}
	time = GameGetMissionTime();
	gatherUnit = EventUnit();
	refinery = EventUnitTargetUnit();
	resourceAmount = UnitGetPropertyInt(gatherUnit, c_unitPropCarriedMinerals, true);
	while (UnitIsAlive(gatherUnit) && resourceAmount > 0 && UnitIsAlive(refinery) && OrderGetAbilityCommand(UnitOrder(gatherUnit, 0)) == AbilityCommand("SCVHarvest", 0) && OrderGetTargetUnit(UnitOrder(gatherUnit, 0)) == refinery) {
		resourceDelta = RoundI((GameGetMissionTime() - time) * rate);
		time = GameGetMissionTime();
		PlayerModifyPropertyInt(UnitGetOwner(gatherUnit), c_playerPropMinerals, c_playerPropOperAdd, MinI(resourceAmount, resourceDelta));
		resourceAmount -= MinI(resourceAmount, resourceDelta);
		UnitSetPropertyInt(gatherUnit, c_unitPropCarriedMinerals, resourceAmount);
		Wait(0.0625, c_timeGame);
	}
	if (!UnitIsAlive(gatherUnit)) {
		return true;
	}
	if (UnitGetPropertyInt(gatherUnit, c_unitPropCarriedMinerals, true) == 0) {
		UnitBehaviorRemove(gatherUnit, "CarryMineralFieldMinerals", 1);
	}
	if (OrderGetAbilityCommand(UnitOrder(gatherUnit, 0)) == AbilityCommand("SCVHarvest", 0) && OrderGetTargetUnit(UnitOrder(gatherUnit, 0)) == refinery) {
		UnitIssueOrder(gatherUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
		UnitIssueOrder(gatherUnit, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), AIGetClosestUnit(gatherUnit, UnitGroup("TibVein", c_playerAny, RegionEntireMap(), UnitFilter(0,0,0,0), 0), true)), c_orderQueueReplace);
	}
	return true;
}

void Gather_Init () {
	gather = TriggerCreate("Gather_Func");
	TriggerAddEventUnitAbility(gather, null, AbilityCommand("SCVHarvest", 0), c_abilHarvestStageHarvest, false);
}

bool Returning_Func (bool testConds, bool runActions) {
	if (!runActions) {
		return true;
	}
	if (UnitHasBehavior(EventUnitTargetUnit(), "Refinery")) {
		UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), EventUnitTargetUnit()), c_orderQueueAddToFront);
	}
	return true;
}

void Returning_Init () {
	returning = TriggerCreate("Returning_Func");
	TriggerAddEventUnitAbility(returning, null, AbilityCommand("SCVHarvest", 1), c_abilHarvestStageApproachDropOff, false);
}

bool Idle_Func (bool testConds, bool runActions) {
	unit idleUnit;
	unitgroup resourceGroup;
	bool remainsIdle;
	if (testConds) {
		if (!UnitAbilityExists(EventUnit(), "SCVHarvest")) {
			return false;
		}
	}
	
	if (!runActions) {
		return false;
	}
	idleUnit = EventUnit();
	UnitIssueOrder(idleUnit, Order(AbilityCommand("SCVHarvest", 1)), c_orderQueueReplace);
	do {
		remainsIdle = (UnitOrderCount(idleUnit) == 0);
		Wait(1, c_timeGame);
		resourceGroup = UnitGroup("TibVein", c_playerAny, RegionEntireMap(), UnitFilter(0,0,0,0), 0);
	} while (UnitGroupCount(resourceGroup, c_unitCountAlive) == 0 && (UnitOrderCount(idleUnit) == 0 || remainsIdle) || DistanceBetweenPoints(UnitGetPosition(idleUnit), UnitGetPosition(AIGetClosestUnit(idleUnit, resourceGroup, true))) > 20);
	if ((UnitOrderCount(idleUnit) == 0 || remainsIdle)) {
		UnitIssueOrder(idleUnit, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), AIGetClosestUnit(idleUnit, resourceGroup, true)), c_orderQueueReplace);
	}
	return true;
}

void Idle_Init () {
	idle = TriggerCreate("Idle_Func");
	TriggerAddEventUnitBecomesIdle(idle, null, true);
}

bool Building_Func (bool testConds, bool runActions) {
	unit buildingUnit;
	fixed progress;
	int totaledCost;
	int prevCost;
	bool paused;
	fixed totalTime;
	
	if (testConds) {
		if (UnitQueueItemCount(EventUnit(), 1) == 0) {
			return false;
		}
//		if (libNtve_gf_TriggeringProgressUnitType() != null) {
//			UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("is unit"));
//			if (AIDefaultGetObjectType(UnitGetOwner(EventUnit()), libNtve_gf_TriggeringProgressUnitType()) == 1 && libNtve_gf_TriggeringProgressUnitType() != "TechLab") {
//				UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("is techlab"));
//				return false;
//			}
//		}
	}
	
	buildingUnit = EventUnit();
	while (UnitHasBehavior(buildingUnit, "BuildHandled")) {
		Wait(0.0625, c_timeGame);
	}
	totalTime = UnitQueueItemTime(buildingUnit, c_unitQueueTimeTotal, 1);
	UnitBehaviorAdd(buildingUnit, "BuildHandled", buildingUnit, 1);
	do {
		if (!UnitIsAlive(buildingUnit)) {
			PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperAdd, totaledCost);
			return true;
		}
		if ((progress > UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1) || UnitQueueItemCount(buildingUnit, 1) == 0) && UnitCheckProgressState(buildingUnit, 1, c_unitProgressStatePaused)) {
			PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperAdd, totaledCost);
			return true;
		}
		if (PlayerGetPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals) < FloorI(UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1) * spendrate - totaledCost)) {
			UnitBehaviorAdd(buildingUnit, "ConstructStop", buildingUnit, 1);
			Wait(0.0625, c_timeGame);
			continue;
		}
		UnitBehaviorRemove(buildingUnit, "ConstructStop", 1);
		prevCost = totaledCost;
		totaledCost = FloorI(UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1) * spendrate);
		PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperSubtract, totaledCost - prevCost);
		progress = UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1);
		paused = UnitCheckProgressState(buildingUnit, 1, c_unitProgressStatePaused);
		Wait(0.0625, c_timeGame);
	} while (progress <= UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1));
	if (!UnitIsAlive(buildingUnit)) {
		PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperAdd, totaledCost);
		return true;
	}
	UnitBehaviorRemove(buildingUnit, "BuildHandled", 1);
	Wait(0.0625, c_timeGame);
	if (!(paused || UnitHasBehavior(buildingUnit, "Cancel"))) { // behavior appears to not work but it's here anyways because we can always hope
		while (PlayerGetPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals) < (RoundI(totalTime * spendrate) - totaledCost)) {
			Wait(0.0625, c_timeGame);
		}
		PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperSubtract, RoundI(totalTime * spendrate) - totaledCost);
	} else {
		PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperAdd, totaledCost);
	}
	return true;
}

void Building_Init () {
	building = TriggerCreate("Building_Func");
	TriggerAddEventUnitTrainProgress(building, null, c_unitProgressStageStart);
	TriggerAddEventUnitSpecializeProgress(building, null, c_unitProgressStageStart);
	//TriggerAddEventUnitConstructProgress(building, null, c_unitProgressStageStart);
}

bool Research_Func (bool testConds, bool runActions) {
	unit buildingUnit;
	fixed progress;
	int targetCost;
	fixed costRate;
	int totaledCost;
	int prevCost;
	bool paused;
	fixed totalTime;
	
	if (testConds) {
		if (UnitQueueItemCount(EventUnit(), 1) == 0) {
			return false;
		}
	}
	
	buildingUnit = EventUnit();
	while (UnitHasBehavior(buildingUnit, "BuildHandled")) {
		Wait(0.0625, c_timeGame);
	}
	targetCost = CatalogFieldValueGetAsInt(c_gameCatalogUpgrade, libNtve_gf_TriggeringProgressUpgrade(), "BonusResourcePerLevel[0]", c_playerAny);
	totalTime = UnitQueueItemTime(buildingUnit, c_unitQueueTimeTotal, 1);
	costRate = Round(IntToFixed(targetCost) / totalTime);
	UnitBehaviorAdd(buildingUnit, "BuildHandled", buildingUnit, 1);
	do {
		if (!UnitIsAlive(buildingUnit)) {
			PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperAdd, totaledCost);
			return true;
		}
		if ((progress > UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1) || UnitQueueItemCount(buildingUnit, 1) == 0) && UnitCheckProgressState(buildingUnit, 1, c_unitProgressStatePaused)) {
			PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperAdd, totaledCost);
			return true;
		}
		if (PlayerGetPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals) < FloorI(UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1) * costRate - totaledCost)) {
			UnitBehaviorAdd(buildingUnit, "ConstructStop", buildingUnit, 1);
			Wait(0.0625, c_timeGame);
			continue;
		}
		UnitBehaviorRemove(buildingUnit, "ConstructStop", 1);
		prevCost = totaledCost;
		totaledCost = FloorI(UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1) * costRate);
		PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperSubtract, totaledCost - prevCost);
		progress = UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1);
		paused = UnitCheckProgressState(buildingUnit, 1, c_unitProgressStatePaused);
		Wait(0.0625, c_timeGame);
	} while (progress <= UnitQueueItemTime(buildingUnit, c_unitQueueTimeElapsed, 1));
	if (!UnitIsAlive(buildingUnit)) {
		PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperAdd, totaledCost);
		return true;
	}
	UnitBehaviorRemove(buildingUnit, "BuildHandled", 1);
	Wait(0.0625, c_timeGame);
	if (!(paused || UnitHasBehavior(buildingUnit, "Cancel"))) { // behavior appears to not work but it's here anyways because we can always hope
		while (PlayerGetPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals) < (RoundI(totalTime * costRate) - totaledCost)) {
			Wait(0.0625, c_timeGame);
		}
		PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperSubtract, targetCost - totaledCost);
	} else {
		PlayerModifyPropertyInt(UnitGetOwner(buildingUnit), c_playerPropMinerals, c_playerPropOperAdd, totaledCost);
	}
	return true;
}

void Research_Init () {
	research = TriggerCreate("Research_Func");
	TriggerAddEventUnitResearchProgress(research, null, c_unitProgressStageStart);
}

bool Pause_Func (bool testConds, bool runActions) {
	if (UnitQueueItemCount(EventUnit(), 1) != 0) {
		UnitSetProgressStage(EventUnit(), 1, c_unitProgressStagePause);
	}
	return true;
}

void Pause_Init () {
	pause = TriggerCreate("Pause_Func");
	TriggerAddEventUnitAbility(pause, null, AbilityCommand("PauseResumeQueue", 0), c_unitAbilStageAll, false);
}

bool Resume_Func (bool testConds, bool runActions) {
	UnitSetProgressStage(EventUnit(), 1, c_unitProgressStageResume);
	return true;
}

void Resume_Init () {
	resume = TriggerCreate("Resume_Func");
	TriggerAddEventUnitAbility(resume, null, AbilityCommand("PauseResumeQueue", 1), c_unitAbilStageAll, false);
}

bool Cancel_Func (bool testConds, bool runActions) {
	if (UnitQueueItemCount(EventUnit(), 1) == 0) {
		UnitBehaviorRemove(EventUnit(), "QueuePaused", 1);
	}
	if (UnitHasBehavior(EventUnit(), "QueuePaused")) {
	UnitSetProgressStage(EventUnit(), 1, c_unitProgressStagePause);
	}
	UnitBehaviorAdd(EventUnit(), "Cancel", EventUnit(), 1);
	return true;
}

void Cancel_Init () {
	cancel = TriggerCreate("Cancel_Func");
	TriggerAddEventUnitTrainProgress(cancel, null, c_unitProgressStageCancel);
	TriggerAddEventUnitSpecializeProgress(cancel, null, c_unitProgressStageCancel);
}

bool UnloadSquads_Func (bool testConds, bool runActions) {
	if (UnitGetMagazine(EventUnitCargo()) != null) {
		if (libNtve_gf_UnitIsInsideTransport(UnitGetMagazine(EventUnitCargo()))) {
			UnitPutInTransport(EventUnitCargo(), EventUnit());
		}
	}
	return true;
}

void UnloadSquads_Init () {
	unloadSquads = TriggerCreate("UnloadSquads_Func");
	TriggerAddEventUnitCargo(unloadSquads, null, false);
}

bool TechUnlock_Func (bool textConds, bool runActions) {
	int lv_i;
	PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 0), true);
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 1), true);
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 2), true);
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 3), true);
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 8), true);
	//7 = shadow ops, 9 = armory, 11 = fusion core
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 0), true);
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 1), true);
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 2), true);
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 3), true);
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 8), true);
    TechTreeAbilityAllow(1, AbilityCommand("Barracks2AddOns", 0), TechTreeAbilityIsAllowed(1, AbilityCommand("BarracksAddOns", 0)));
    TechTreeAbilityAllow(1, AbilityCommand("Factory2AddOns", 0), TechTreeAbilityIsAllowed(1, AbilityCommand("FactoryAddOns", 0)));
    TechTreeAbilityAllow(1, AbilityCommand("Starport2AddOns", 0), TechTreeAbilityIsAllowed(1, AbilityCommand("StarportAddOns", 0)));
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 10), (TechTreeAbilityIsAllowed(1, AbilityCommand("BarracksTrain", 3)) || TechTreeAbilityIsAllowed(1, AbilityCommand("BarracksTrain", 5))));
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 10), (TechTreeAbilityIsAllowed(1, AbilityCommand("BarracksTrain", 3)) || TechTreeAbilityIsAllowed(1, AbilityCommand("BarracksTrain", 5))));
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 4), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 6)));
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 4), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 6)));
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 5), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 5)));
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 5), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 5)));
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 6), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 8)));
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 6), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 8)));
	TechTreeAbilityAllow(1, AbilityCommand("CCBuild", 13), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 5)));
	TechTreeAbilityAllow(1, AbilityCommand("CCPlaceBuilding", 13), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 5)));
	TechTreeAbilityAllow(1, AbilityCommand("EngineeringBay2Research", 0), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 5)));
	TechTreeAbilityAllow(1, AbilityCommand("EngineeringBay2Research", 1), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 5)));
	TechTreeAbilityAllow(1, AbilityCommand("BarracksTechLabResearch", 3), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 5)));
	TechTreeAbilityAllow(1, AbilityCommand("BarracksTechLabResearch", 4), TechTreeAbilityIsAllowed(1, AbilityCommand("TerranBuild", 5)));
	for (lv_i = 0; lv_i < 9; lv_i += 1) {
		TechTreeAbilityAllow(1, AbilityCommand("Barracks2Train", lv_i), TechTreeAbilityIsAllowed(1, AbilityCommand("BarracksTrain", lv_i)));
	}
	for (lv_i = 0; lv_i < 10; lv_i += 1) {
		TechTreeAbilityAllow(1, AbilityCommand("Factory2Train", lv_i), TechTreeAbilityIsAllowed(1, AbilityCommand("FactoryTrain", lv_i)));
	}
	for (lv_i = 0; lv_i < 8; lv_i += 1) {
		TechTreeAbilityAllow(1, AbilityCommand("Starport2Train", lv_i), TechTreeAbilityIsAllowed(1, AbilityCommand("StarportTrain", lv_i)));
	}
	return true;
}

void TechUnlock_Init () {
	techUnlock = TriggerCreate("TechUnlock_Func");
	TriggerAddEventTimeElapsed(techUnlock, 1, c_timeGame);
}

bool INI_Func (bool testConds, bool runActions) {
	UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
	rate = 117;
	spendrate = 100;
	PlayerSetState(1, c_playerStateFormationMove, true);
	PlayerModifyPropertyInt(1, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 10000);
	PlayerModifyPropertyInt(1, c_playerPropSuppliesMade, c_playerPropOperAdd, 1);
	return true;
}

void INI_Init () {
	INI = TriggerCreate("INI_Func");
	TriggerAddEventMapInit(INI);
}

void main() {
	Gather_Init();
	Returning_Init();
	Idle_Init();
	Building_Init();
	Research_Init();
	Pause_Init();
	Resume_Init();
	Cancel_Init();
	UnloadSquads_Init();
	TechUnlock_Init();
	INI_Init();
}